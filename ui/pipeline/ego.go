// Generated by ego.
// DO NOT EDIT

package pipeline

import (
	"fmt"
	"github.com/infinitbyte/framework/modules/ui/common"
	"io"
	"net/http"
)

var _ = fmt.Sprint("") // just so that we can keep the fmt import for now
func Index(w http.ResponseWriter, r *http.Request) error {
	_, _ = io.WriteString(w, "\n\n")
	_, _ = io.WriteString(w, "\n")
	_, _ = io.WriteString(w, "\n")
	common.Head(w, "Pipeline", "")
	_, _ = io.WriteString(w, "\n\n<script src=\"/static/assets/js/axios.min.js\"></script>\n<style type=\"text/css\">\n    pre{\n        margin-top:0px;\n        margin-bottom:0px;\n        padding-top:4px;\n        padding-bottom:4px;\n    }\n    .request pre{\n        color:royalblue;\n    }\n    #log {\n        max-height: 200px;\n    }\n    #logging {\n        height: 500px;\n        max-height: 1000px;\n    }\n    .dialog-display-none {display:none;}\n    .uk-modal-dialog {width: 1000px;}\n    .block-joint {background:#eee; color: #000; margin: 5px; height:40px;}\n    .td-joint {word-wrap: break-word; text-align:center;}\n</style>\n\n")
	common.Body(w)
	_, _ = io.WriteString(w, "\n")
	common.Nav(w, r, "Pipeline")
	_, _ = io.WriteString(w, "\n\n\n\n<div class=\"tm-middle\">\n\n    <div class=\"uk-container uk-container-center\">\n\n        <div class=\"uk-overflow-container\" id=\"app-pipeline-manage\">\n            <div class=\"uk-width-medium-1-3\">\n                <div class=\"uk-panel uk-panel-box\">\n                    <h3 class=\"uk-panel-title\">Type the name of pipline here</h3>\n                    <form class=\"uk-form uk-width-medium-1-3\">\n                        <div class=\"uk-form-row\">\n                            <input placeholder=\"pipeline name\" v-model=\"pipelineForm.name\">\n                        </div>\n                    </form>\n                    <hr>\n                    <button class=\"uk-button\" type=\"button\" @click=\"addPipeline\">Create Pipeline</button>\n                </div>\n            </div>\n            <hr>\n            <div class=\"uk-grid\" data-uk-grid-margin=\"\">\n                <div class=\"uk-width-medium-1-3\" v-bind:class=\"{ 'uk-grid-margin': (index > 2) }\" v-for=\"(pipeline, index) in pipelines\">\n                    <div class=\"uk-panel uk-panel-box uk-panel-header\">\n                        <h3 class=\"uk-panel-title\"><a href=\"#\" class=\"uk-icon-small uk-icon-hover uk-icon-github\"></a> {{ pipeline.name }}</h3>\n                        <div class=\"uk-modal-footer uk-text-right\">\n                            <button class=\"uk-button\" type=\"button\" @click=\"showEditPipelineModal(pipeline)\">edit</button>\n                            <button type=\"button\" class=\"uk-button\" @click=\"UIkit.modal.confirm('Are you sure?', function(){ removePipeLine(pipeline, index) })\">remove</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"editPipelineVisible\" v-bind:class=\"{ 'dialog-display-none': editPipelineVisible }\" class=\"uk-modal uk-open\" aria-hidden=\"false\" style=\"display: block; overflow-y: scroll;\">\n                <div class=\"uk-modal-dialog\">\n                    <a class=\"uk-modal-close uk-close\" @click=\"closeEditPipelineModal\"></a>\n                    <h3>{{ pipelineSeleted.name }} joints</h3>\n                    <select v-model=\"addJointName\" @change='changeJoint'>\n                        <option v-for=\"(val, key, index) in joints\" :value=\"key\">{{key}}</option>\n                    </select>\n                    <button class=\"uk-button\" type=\"button\" @click=\"showJoint(addJointName, 'add')\">addJoint</button>\n                    <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\" style=\"table-layout:fixed; margin-top: 10px;\">\n                        <tbody>\n                        <tr>\n                            <td class=\"td-joint\">\n                                <div class=\"block-joint\">\n                                    <a @click=\"showJoint('init_task', 'modify')\">init_task</a>\n                                </div>\n                            </td>\n                            <td class=\"td-joint\" v-for=\"(joint, index) in pipelineSeleted.process\">\n                                <div class=\"block-joint\">\n                                    <a @click=\"showJoint(joint.joint, 'modify')\">{{ joint.joint }}</a>\n                                </div>\n                            </td>\n                            <td class=\"td-joint\">\n                                <div class=\"block-joint\">\n                                    <a @click=\"showJoint('save_task', 'modify')\">save_task</a>\n                                </div>\n                            </td>\n                        </tr>\n                        </tbody>\n                    </table>\n                    <h3>{{ jointForm.jointName }}</h3>\n                    <label>enable:</label><input type=\"checkbox\" v-model=\"jointForm.enabled\">\n                    <template v-if=\"jointForm.jointName === 'url_filter'\">\n                        <div>\n                            <ul class=\"uk-tab\" data-uk-tab>\n                                <li v-bind:class=\"{ 'uk-active' : (index0 === jointTabIndex) }\" @click=\"jointTabIndex = index0\" v-for=\"(val0, key0, index0) in jointForm.jointParameters\">\n                                    <a>{{ key0 }}</a>\n                                </li>\n                            </ul>\n                        </div>\n                        <div v-for=\"(val0, key0, index0) in jointForm.jointParameters\">\n                            <template v-if=\"index0 === jointTabIndex\">\n                                <div v-for=\"(val1, key1, index1) in val0\">\n                                    <template v-if=\"typeof val1 === 'object'\">\n                                        <label>{{ key1 }}</label>\n                                        <div v-for=\"(val2, key2, index2) in val1\">\n                                            <template v-if=\"typeof val2 === 'string'\">\n                                                <label style=\"margin-left: 40px;\">{{ key2 }}:</label>\n                                                <input v-model=\"jointForm.jointParameters[key0][key1][key2]\">\n                                            </template>\n                                        </div>\n                                    </template>\n                                </div>\n                            </template>\n                        </div>\n                    </template>\n                    <template v-if=\"jointForm.jointName !== 'url_filter'\">\n                        <div v-for=\"(val, key, index) in jointForm.jointParameters\">\n                            <template v-if=\"typeof val === 'boolean'\">\n                                <label>{{ key }}:</label>\n                                <input type=\"checkbox\" v-model=\"jointForm.jointParameters[key]\">\n                            </template>\n                            <template v-if=\"typeof val === 'number'\">\n                                <label>{{ key }}:</label>\n                                <input v-model=\"jointForm.jointParameters[key]\">\n                            </template>\n                            <template v-if=\"typeof val === 'string'\">\n                                <label>{{ key }}:</label>\n                                <input v-model=\"jointForm.jointParameters[key]\">\n                            </template>\n                        </div>\n                    </template>\n                    <template v-if=\"emptyObject(jointForm.jointParameters)\">\n                        <br>this joint has no parameters\n                    </template>\n                    <div class=\"uk-modal-footer uk-text-right\">\n                        <button type=\"button\" v-if=\"jointForm.canRemove\" class=\"uk-button\" @click=\"UIkit.modal.confirm('Are you sure to remove this joint?', function(){ deleteJoint() })\">remove</button>\n                        <button class=\"uk-button uk-button-primary js-modal-confirm\" @click=\"modifyPipeline\">confirm</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    </div>\n\n</div>\n\n<script>\n    new Vue({\n        el: '#app-pipeline-manage',\n        data: {\n            pipelines: [],\n            joints: {\n                extract: {\n                    htmlBlock: ''\n                },\n                fetch: {\n                    proxy: 'socks5://127.0.0.1:1080',\n                    cookie: '',\n                    timeoutInSeconds: 100\n                },\n                filter_check: {\n                    filter_key: 'check_filter'\n                },\n                html2text: {\n                    mergeWhitespace: false,\n                    removeNonScript: true\n                },\n                ignore_timeout: {\n                    ignoreTimeoutAfterCount: 5\n                },\n                parse: {\n                    dispatchLinks: true,\n                    saveImages: false,\n                    maxDepth: 10,\n                    maxBreadth: 10,\n                    replaceNoscript: true\n                },\n                save_snapshot: {\n                    compressEnabled: true,\n                    bucket: 'Snapshot',\n                    maxRevision: 5\n                },\n                update_check_time: {\n                    decelerate_steps: '24h,48h,72h,168h,360h,720h',\n                    accelerate_steps: '24h,12h,6h,3h,1h30m,45m,30m,20m,10m'\n                },\n                url_filter: {\n                    url_match_rule: {\n                        must_not: {\n                            prefix: ['mailto:', 'data:image/', '#', 'javascript:'],\n                            contain: ['crond/run', 'login', 'logout'],\n                            suffix: []\n                        },\n                        contain: {prefix: [], contain: [], suffix: []},\n                        suffix: {prefix: [], contain: [], suffix: []}\n                    },\n                    host_match_rule: {\n                        must_not: {prefix: [], contain: [], suffix: []},\n                        contain: {prefix: [], contain: [], suffix: []},\n                        suffix: {prefix: [], contain: [], suffix: []}\n                    },\n                    path_match_rule: {\n                        must_not: {prefix: [], contain: [], suffix: []},\n                        contain: {prefix: [], contain: [], suffix: []},\n                        suffix: {prefix: [], contain: [], suffix: []}\n                    },\n                    file_match_rule: {\n                        must_not: {prefix: [], contain: [], suffix: []},\n                        contain: {prefix: [], contain: [], suffix: []},\n                        suffix: {prefix: [], contain: [], suffix: []}\n                    },\n                    file_ext_match_rule: {\n                        must_not: {prefix: [], contain: [], suffix: []},\n                        contain: {prefix: [], contain: [], suffix: []},\n                        suffix: {prefix: [], contain: [], suffix: []}\n                    }\n                },\n                url_normalization: {\n                    follow_all_domain: false,\n                    follow_sub_domain: true,\n                    max_filename_length: 1000\n                },\n                chrome_fetch: {\n                    timeout_in_seconds: 60,\n                    chrome_host: 'http://127.0.0.1:9223',\n                    save_screenshot: true,\n                    screenshot_quality: 50,\n                    screenshot_format: '',\n                    compress_enabled: true\n                },\n                hash: {},\n                content_deduplication: {},\n                lang_detect: {},\n                index: {}\n            },\n            pipelineSeleted: null,\n            addJointName: '',\n            jointSeleted: null,\n            editPipelineVisible: false,\n            jointSettingVisible: false,\n            jointTabIndex: 0,\n            pipelineForm: {\n                name: ''\n            },\n            jointForm: {\n                title: '',\n                action: '',\n                jointName: '',\n                enabled: true,\n                canRemove: true,\n                jointParameters: {}\n            }\n        },\n        watch: {\n            jointForm: {\n                handler: function (val, oldVal) {\n                    this.modifyJoint()\n                },\n                deep: true\n            }\n        },\n        mounted: function() {\n            for (var jointInfo in this.joints) {\n                this.addJointName = jointInfo\n                break\n            }\n            this.getPipeLines()\n        },\n        methods: {\n            deepClone: function(initalObj) {\n                var obj = {}\n                try {\n                    obj = JSON.parse(JSON.stringify(initalObj))\n                }\n                catch (ex){\n                    console.log('deepClone exception')\n                }\n                return obj\n            },\n            emptyObject: function (data) {\n                return (JSON.stringify(data) === '{}')\n            },\n            getPipeLines: function() {\n                var vm = this\n                axios.get('http://127.0.0.1:8001/pipeline/configs/').then(function (response) {\n                    vm.pipelines = response.data.result\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            },\n            addPipeline: function () {\n                if (this.pipelineForm.name.length <= 0) {\n                    UIkit.modal.alert(\"please input pipeline name!\")\n                    return\n                }\n\n                var newPipeline = {\n                    name: this.pipelineForm.name,\n                    start: {\n                        joint: 'init_task',\n                        enabled: true\n                    },\n                    process: [],\n                    end: {\n                        joint: 'save_task',\n                        enabled: true\n                    }\n                }\n\n                var vm = this\n                axios.post('http://127.0.0.1:8001/pipeline/config/', newPipeline).then(function (response) {\n                    vm.pipelines.push(response.data)\n                    vm.pipelineForm.name = ''\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            },\n            modifyPipeline: function (id) {\n                console.log(JSON.stringify(this.pipelineSeleted))\n                var vm = this\n                axios.put('http://127.0.0.1:8001/pipeline/config/' + id, this.pipelineSeleted).then(function (response) {\n                    var pipelineOri = vm.pipelines.find(function(obj) {return obj.id === id})\n                    pipelineOri = response.data\n                }).catch(function (error) {\n                    console.log(error);\n                });\n                this.editPipelineVisible = false\n            },\n            removePipeLine: function (pipeline, index) {\n                var vm = this\n                axios.delete('http://127.0.0.1:8001/pipeline/config/' + pipeline.id).then(function (response) {\n                    vm.pipelines.splice(index, 1)\n                }).catch(function (error) {\n                    console.log(error);\n                });\n            },\n            showEditPipelineModal: function (pipeline) {\n                this.editPipelineVisible = true\n                this.pipelineSeleted = pipeline\n                this.showJoint('init_task', 'modify')\n            },\n            closeEditPipelineModal: function () {\n                this.editPipelineVisible = false\n            },\n            showJoint: function (jointName, action) {\n                this.jointSeleted = this.joints[jointName]\n                if (action === 'add') {\n                    // check this joint is exist or not\n                    var joint = this.jointSeleted.joint\n                    if (this.pipelineSeleted.process === undefined) {\n                        this.pipelineSeleted.process = []\n                    }\n                    var pipelineOri = this.pipelineSeleted.process.find(function(obj) {return obj.joint === jointName})\n                    if (pipelineOri !== undefined) {\n                        UIkit.modal.alert(\"this joint is already exists!\")\n                        return\n                    }\n                    var jointSeletedClone = this.deepClone(this.jointSeleted)\n                    if (jointName === 'url_filter') {\n                        for (var prop0 in jointSeletedClone) {\n                            for (var prop1 in jointSeletedClone[prop0]) {\n                                for (var prop2 in jointSeletedClone[prop0][prop1]) {\n                                    jointSeletedClone[prop0][prop1][prop2] = jointSeletedClone[prop0][prop1][prop2].join()\n                                }\n                            }\n                        }\n                    }\n                    // add joint\n                    this.jointForm = {\n                        title: 'add new joint',\n                        action: 'add',\n                        jointName: jointName,\n                        enabled: true,\n                        canRemove: true,\n                        jointParameters: jointSeletedClone\n                    }\n                } else if (action === 'modify'){\n                    var canRemove = true\n                    var pipelineOri = undefined\n                    if (jointName === 'init_task') {\n                        canRemove = false\n                        pipelineOri = this.pipelineSeleted.start\n                    } else if (jointName === 'save_task') {\n                        canRemove = false\n                        pipelineOri = this.pipelineSeleted.end\n                    } else {\n                        pipelineOri = this.pipelineSeleted.process.find(function(obj) {return obj.joint === jointName})\n                    }\n                    var jointSeletedClone = this.deepClone(this.jointSeleted || pipelineOri.parameters || {})\n                    if (jointName === 'url_filter') {\n                        for (var prop0 in jointSeletedClone) {\n                            for (var prop1 in jointSeletedClone[prop0]) {\n                                for (var prop2 in jointSeletedClone[prop0][prop1]) {\n                                    jointSeletedClone[prop0][prop1][prop2] = ''\n                                    var propOriValue = pipelineOri.parameters[prop0][prop1][prop2]\n                                    if (propOriValue !== undefined) {\n                                        jointSeletedClone[prop0][prop1][prop2] = propOriValue.join()\n                                    }\n                                }\n                            }\n                        }\n                    } else {\n                        for (var prop in jointSeletedClone) {\n                            if (typeof jointSeletedClone[prop] === 'boolean') {\n                                jointSeletedClone[prop] = false\n                            }\n                            if (typeof jointSeletedClone[prop] === 'number') {\n                                jointSeletedClone[prop] = 0\n                            }\n                            if (typeof jointSeletedClone[prop] === 'string') {\n                                jointSeletedClone[prop] = ''\n                            }\n                            if (pipelineOri.parameters !== undefined) {\n                                if(pipelineOri.parameters.hasOwnProperty(prop)) {\n                                    var propOriValue = pipelineOri.parameters[prop]\n                                    if (propOriValue !== undefined) {\n                                        jointSeletedClone[prop] = propOriValue\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    // modify joint\n                    this.jointForm = {\n                        title: 'modify joint',\n                        action: 'modify',\n                        jointName: jointName,\n                        enabled: pipelineOri.enabled,\n                        canRemove: canRemove,\n                        jointParameters: jointSeletedClone\n                    }\n                }\n            },\n            changeJoint: function (ele) {\n                var optionTxt = $(ele.target).find(\"option:selected\").text()\n                var optionVal = ele.target.value\n                this.addJointName = optionVal\n            },\n            modifyJoint: function() {\n                var jointName = this.jointForm.jointName\n                if (this.jointForm.action === 'add') {\n                    if (pipelineOri !== undefined) {\n                        UIkit.modal.alert(\"this joint is already exists!\")\n                        return\n                    }\n                    var newJoint = {\n                        joint: jointName,\n                        enabled: this.jointForm.enabled,\n                        parameters: this.deepClone(this.jointForm.jointParameters)\n                    }\n                    this.pipelineSeleted.process.push(newJoint)\n                    this.showJoint(jointName, 'modify')\n                } else if (this.jointForm.action === 'modify') {\n                    var pipelineOri = undefined\n                    if (jointName === 'init_task') {\n                        pipelineOri = this.pipelineSeleted.start\n                    } else if (jointName === 'save_task') {\n                        pipelineOri = this.pipelineSeleted.end\n                    } else {\n                        if (this.pipelineSeleted.process === undefined) {\n                            this.pipelineSeleted.process = []\n                        }\n                        pipelineOri = this.pipelineSeleted.process.find(function(obj) {return obj.joint === jointName})\n                    }\n\n                    var jointParameters = this.deepClone(this.jointForm.jointParameters)\n                    if (jointName === 'url_filter') {\n                        for (var prop0 in this.jointForm.jointParameters) {\n                            for (var prop1 in this.jointForm.jointParameters[prop0]) {\n                                for (var prop2 in this.jointForm.jointParameters[prop0][prop1]) {\n                                    jointParameters[prop0][prop1][prop2] = this.jointForm.jointParameters[prop0][prop1][prop2].split(',')\n                                }\n                            }\n                        }\n                    }\n                    if (pipelineOri === undefined) {\n                        UIkit.modal.alert(\"this joint is not find!\")\n                        return\n                    }\n                    pipelineOri.enabled = this.jointForm.enabled\n                    pipelineOri.parameters = this.deepClone(jointParameters)\n                }\n            },\n            deleteJoint: function() {\n                for (var i=0; i < this.pipelineSeleted.process.length; i++) {\n                    if (this.pipelineSeleted.process[i].joint === this.jointForm.jointName) {\n                        this.pipelineSeleted.process.splice(i, 1)\n                        this.showJoint('init_task', 'modify')\n                        break\n                    }\n                }\n            }\n        }\n    })\n</script>\n\n")
	common.Footer(w)
	_, _ = io.WriteString(w, "\n")
	return nil
}
