// Code generated by cdpgen. DO NOT EDIT.

// Package browser implements the Browser domain. The Browser domain defines methods and events for browser managing.
package browser

import (
	"context"

	"github.com/mafredri/cdp/protocol/internal"
	"github.com/mafredri/cdp/rpcc"
)

// domainClient is a client for the Browser domain. The Browser domain defines methods and events for browser managing.
type domainClient struct{ conn *rpcc.Conn }

// NewClient returns a client for the Browser domain with the connection set to conn.
func NewClient(conn *rpcc.Conn) *domainClient {
	return &domainClient{conn: conn}
}

// Close invokes the Browser method. Close browser gracefully.
func (d *domainClient) Close(ctx context.Context) (err error) {
	err = rpcc.Invoke(ctx, "Browser.close", nil, nil, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Browser", Op: "Close", Err: err}
	}
	return
}

// GetVersion invokes the Browser method. Returns version information.
func (d *domainClient) GetVersion(ctx context.Context) (reply *GetVersionReply, err error) {
	reply = new(GetVersionReply)
	err = rpcc.Invoke(ctx, "Browser.getVersion", nil, reply, d.conn)
	if err != nil {
		err = &internal.OpError{Domain: "Browser", Op: "GetVersion", Err: err}
	}
	return
}

// GetWindowBounds invokes the Browser method. Get position and size of the browser window.
func (d *domainClient) GetWindowBounds(ctx context.Context, args *GetWindowBoundsArgs) (reply *GetWindowBoundsReply, err error) {
	reply = new(GetWindowBoundsReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Browser.getWindowBounds", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Browser.getWindowBounds", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Browser", Op: "GetWindowBounds", Err: err}
	}
	return
}

// GetWindowForTarget invokes the Browser method. Get the browser window that contains the devtools target.
func (d *domainClient) GetWindowForTarget(ctx context.Context, args *GetWindowForTargetArgs) (reply *GetWindowForTargetReply, err error) {
	reply = new(GetWindowForTargetReply)
	if args != nil {
		err = rpcc.Invoke(ctx, "Browser.getWindowForTarget", args, reply, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Browser.getWindowForTarget", nil, reply, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Browser", Op: "GetWindowForTarget", Err: err}
	}
	return
}

// SetWindowBounds invokes the Browser method. Set position and/or size of the browser window.
func (d *domainClient) SetWindowBounds(ctx context.Context, args *SetWindowBoundsArgs) (err error) {
	if args != nil {
		err = rpcc.Invoke(ctx, "Browser.setWindowBounds", args, nil, d.conn)
	} else {
		err = rpcc.Invoke(ctx, "Browser.setWindowBounds", nil, nil, d.conn)
	}
	if err != nil {
		err = &internal.OpError{Domain: "Browser", Op: "SetWindowBounds", Err: err}
	}
	return
}
