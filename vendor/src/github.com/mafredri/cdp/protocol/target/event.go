// Code generated by cdpgen. DO NOT EDIT.

package target

import (
	"github.com/mafredri/cdp/rpcc"
)

// AttachedToTargetClient is a client for AttachedToTarget events. Issued when attached to target because of auto-attach or `attachToTarget` command.
type AttachedToTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*AttachedToTargetReply, error)
	rpcc.Stream
}

// AttachedToTargetReply is the reply for AttachedToTarget events.
type AttachedToTargetReply struct {
	SessionID          SessionID `json:"sessionId"`          // Identifier assigned to the session used to send/receive messages.
	TargetInfo         Info      `json:"targetInfo"`         // No description.
	WaitingForDebugger bool      `json:"waitingForDebugger"` // No description.
}

// DetachedFromTargetClient is a client for DetachedFromTarget events. Issued when detached from target for any reason (including `detachFromTarget` command). Can be issued multiple times per target if multiple sessions have been attached to it.
type DetachedFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DetachedFromTargetReply, error)
	rpcc.Stream
}

// DetachedFromTargetReply is the reply for DetachedFromTarget events.
type DetachedFromTargetReply struct {
	SessionID SessionID `json:"sessionId"` // Detached session identifier.
	// TargetID is deprecated.
	//
	// Deprecated: Deprecated.
	TargetID *ID `json:"targetId,omitempty"`
}

// ReceivedMessageFromTargetClient is a client for ReceivedMessageFromTarget events. Notifies about a new protocol message received from the session (as reported in `attachedToTarget` event).
type ReceivedMessageFromTargetClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*ReceivedMessageFromTargetReply, error)
	rpcc.Stream
}

// ReceivedMessageFromTargetReply is the reply for ReceivedMessageFromTarget events.
type ReceivedMessageFromTargetReply struct {
	SessionID SessionID `json:"sessionId"` // Identifier of a session which sends a message.
	Message   string    `json:"message"`   // No description.
	// TargetID is deprecated.
	//
	// Deprecated: Deprecated.
	TargetID *ID `json:"targetId,omitempty"`
}

// CreatedClient is a client for TargetCreated events. Issued when a possible inspection target is created.
type CreatedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*CreatedReply, error)
	rpcc.Stream
}

// CreatedReply is the reply for TargetCreated events.
type CreatedReply struct {
	TargetInfo Info `json:"targetInfo"` // No description.
}

// DestroyedClient is a client for TargetDestroyed events. Issued when a target is destroyed.
type DestroyedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*DestroyedReply, error)
	rpcc.Stream
}

// DestroyedReply is the reply for TargetDestroyed events.
type DestroyedReply struct {
	TargetID ID `json:"targetId"` // No description.
}

// InfoChangedClient is a client for TargetInfoChanged events. Issued when some information about a target has changed. This only happens between `targetCreated` and `targetDestroyed`.
type InfoChangedClient interface {
	// Recv calls RecvMsg on rpcc.Stream, blocks until the event is
	// triggered, context canceled or connection closed.
	Recv() (*InfoChangedReply, error)
	rpcc.Stream
}

// InfoChangedReply is the reply for TargetInfoChanged events.
type InfoChangedReply struct {
	TargetInfo Info `json:"targetInfo"` // No description.
}
